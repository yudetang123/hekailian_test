


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       *********************//**
    2 00000000         ;  文件名称: os_cpu_a.s
    3 00000000         ;  作　  者: Zhengyu https://gzwelink.taobao.com
    4 00000000         ;  版    本: V1.0.0
    5 00000000         ;  日  　期: 2020年1月1日
    6 00000000         ;  适用硬件:MINI-G070RBT6 开发板
    7 00000000         ;  * 郑重声明：
    8 00000000         ;  * 此文件只用于提供开发参考
    9 00000000         ;*******************************************************
                       ************************/
   10 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   11 00000000                 EXTERN           OSPrioCur
   12 00000000                 EXTERN           OSPrioHighRdy
   13 00000000                 EXTERN           OSTCBCur
   14 00000000                 EXTERN           OSTCBHighRdy
   15 00000000                 EXTERN           OSIntNesting
   16 00000000                 EXTERN           OSIntExit
   17 00000000                 EXTERN           OSTaskSwHook
   18 00000000         
   19 00000000         
   20 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   21 00000000                 EXPORT           OS_CPU_SR_Restore
   22 00000000                 EXPORT           OSStartHighRdy
   23 00000000                 EXPORT           OSCtxSw
   24 00000000                 EXPORT           OSIntCtxSw
   25 00000000         
   26 00000000         
   27 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   28 00000000                 THUMB
   29 00000000                 REQUIRE8
   30 00000000                 PRESERVE8
   31 00000000         
   32 00000000         ;*******************************************************
                       *************************************************
   33 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   34 00000000         ;
   35 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   36 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   37 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   38 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   39 00000000         ;              into the CPU's status register.
   40 00000000         ;
   41 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   42 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   43 00000000         ;
   44 00000000         ;
   45 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   46 00000000         ;



ARM Macro Assembler    Page 2 


   47 00000000         ;                 void Task (void *p_arg)
   48 00000000         ;                 {
   49 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   50 00000000         ;                     OS_CPU_SR  cpu_sr;
   51 00000000         ;                 #endif
   52 00000000         ;
   53 00000000         ;                          :
   54 00000000         ;                          :
   55 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   56 00000000         ;                          :
   57 00000000         ;                          :
   58 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   59 00000000         ;                          :
   60 00000000         ;                          :
   61 00000000         ;                 }
   62 00000000         ;*******************************************************
                       *************************************************
   63 00000000         
   64 00000000         OS_CPU_SR_Save
   65 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   66 00000004 B672            CPSID            I
   67 00000006 4770            BX               LR
   68 00000008         
   69 00000008         
   70 00000008         OS_CPU_SR_Restore
   71 00000008 F380 8810       MSR              PRIMASK, R0
   72 0000000C 4770            BX               LR
   73 0000000E         
   74 0000000E         
   75 0000000E         
   76 0000000E         ;*******************************************************
                       *************************************************
   77 0000000E         ;                                          START MULTITA
                       SKING
   78 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
   79 0000000E         ;
   80 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   81 0000000E         ;              the first task to start.
   82 0000000E         ;
   83 0000000E         ;           2) OSStartHighRdy() MUST:
   84 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
   85 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
   86 0000000E         ;              c) Set OSRunning to TRUE;
   87 0000000E         ;              d) Trigger PendSV exception;
   88 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
   89 0000000E         ;*******************************************************
                       *************************************************
   90 0000000E         
   91 0000000E         OSStartHighRdy



ARM Macro Assembler    Page 3 


   92 0000000E 4841            LDR              R0, __OS_TaskSwHook 
                                                            ; OSTaskSwHook();
   93 00000010 4780            BLX              R0
   94 00000012         
   95 00000012 4845            LDR              R0, __OS_Running 
                                                            ; OSRunning = TRUE;
                                                            
   96 00000014 2101            MOVS             R1, #1
   97 00000016 7001            STRB             R1, [R0]
   98 00000018         
   99 00000018         ; SWITCH TO HIGHEST PRIORITY TASK:
  100 00000018 4845            LDR              R0, __OS_TCBHighRdy ;   Get hig
                                                            hest priority task 
                                                            TCB address,
  101 0000001A 6801            LDR              R1, [R0]    ;   Get stack point
                                                            er,
  102 0000001C 680A            LDR              R2, [R1]
  103 0000001E F382 8808       MSR              MSP, R2     ;   Switch to the n
                                                            ew stack,
  104 00000022         
  105 00000022 BCFF            POP              {R0-R7}     ;   Pop new task's 
                                                            R8-R11 (into R0-R3)
                                                            , R4-R7
  106 00000024 4680            MOV              R8,  R0
  107 00000026 4689            MOV              R9,  R1
  108 00000028 4692            MOV              R10, R2
  109 0000002A 469B            MOV              R11, R3
  110 0000002C         
  111 0000002C         ; NORMAL FUNCTION RETURN (see Note #2)
  112 0000002C B004            ADD              SP, #0x10
  113 0000002E BC0F            POP              {R0-R3}     ;   Pop new task's 
                                                            R12, PC, LR, PSR in
                                                            to (R0, R1, R2, R3,
                                                             respectively)
  114 00000030 4684            MOV              R12, R0
  115 00000032 468E            MOV              LR,  R1
  116 00000034 F383 8803       MSR              PSR, R3
  117 00000038         
  118 00000038 B404            PUSH             {R2}        ;   Save PC
  119 0000003A         
  120 0000003A B087            SUB              SP, #0x1C
  121 0000003C BC0F            POP              {R0-R3}     ;   Pop new task's 
                                                            R0-R3
  122 0000003E B003            ADD              SP, #0x0C
  123 00000040         
  124 00000040 B662            CPSIE            I           ;   Enable interrup
                                                            ts
  125 00000042         
  126 00000042 BD00            POP              {PC}        ;   Pop new task's 
                                                            PC
  127 00000044         
  128 00000044         
  129 00000044         
  130 00000044         ;*******************************************************
                       *************************************************
  131 00000044         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  132 00000044         ;                                           void OSCtxSw
                       (void)



ARM Macro Assembler    Page 4 


  133 00000044         ;
  134 00000044         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  135 00000044         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  136 00000044         ;*******************************************************
                       *************************************************
  137 00000044         
  138 00000044         OSCtxSw
  139 00000044 B672            CPSID            I
  140 00000046 B084            SUB              SP,#0x10
  141 00000048 B40F            PUSH             {R0-R3}
  142 0000004A         
  143 0000004A B008            ADD              SP,#0x20
  144 0000004C F3EF 8303       MRS              R3, PSR
  145 00000050 4672            MOV              R2, LR
  146 00000052 4671            MOV              R1, LR
  147 00000054 4660            MOV              R0, R12
  148 00000056 B40F            PUSH             {R0-R3}
  149 00000058         
  150 00000058 B084            SUB              SP, #0x10
  151 0000005A 4640            MOV              R0, R8
  152 0000005C 4649            MOV              R1, R9
  153 0000005E 4652            MOV              R2, R10
  154 00000060 465B            MOV              R3, R11
  155 00000062 B4FF            PUSH             {R0-R7}
  156 00000064         
  157 00000064         
  158 00000064 F3EF 8008       MRS              R0, MSP
  159 00000068 4930            LDR              R1, __OS_TCBCur ; OSTCBCur->OST
                                                            CBStkPtr = SP;
  160 0000006A 6809            LDR              R1, [R1]
  161 0000006C 6008            STR              R0, [R1]
  162 0000006E         
  163 0000006E 4829            LDR              R0, __OS_TaskSwHook 
                                                            ; OSTaskSwHook();
  164 00000070 4780            BLX              R0
  165 00000072         
  166 00000072 482B            LDR              R0, __OS_PrioCur ; OSPrioCur = 
                                                            OSPrioHighRdy;
  167 00000074 492B            LDR              R1, __OS_PrioHighRdy
  168 00000076 780A            LDRB             R2, [R1]
  169 00000078 7002            STRB             R2, [R0]
  170 0000007A         
  171 0000007A 482C            LDR              R0, __OS_TCBCur ; OSTCBCur  = O
                                                            STCBHighRdy;
  172 0000007C 492C            LDR              R1, __OS_TCBHighRdy
  173 0000007E 680A            LDR              R2, [R1]
  174 00000080 6002            STR              R2, [R0]
  175 00000082         
  176 00000082 6810            LDR              R0, [R2]    ; SP = OSTCBHighRdy
                                                            ->OSTCBStkPtr;
  177 00000084 F380 8808       MSR              MSP, R0
  178 00000088         
  179 00000088         ; RESTORE TASK's CONTEXT
  180 00000088 BCFF            POP              {R0-R7}     ;   Pop new task's 
                                                            R8-R11 (into R0-R3)
                                                            , R4-R7
  181 0000008A 4680            MOV              R8,  R0



ARM Macro Assembler    Page 5 


  182 0000008C 4689            MOV              R9,  R1
  183 0000008E 4692            MOV              R10, R2
  184 00000090 469B            MOV              R11, R3
  185 00000092         
  186 00000092 B004            ADD              SP, #0x10
  187 00000094 BC0F            POP              {R0-R3}     ;   Pop new task's 
                                                            R12, PC, LR, PSR in
                                                            to (R0, R1, R2, R3,
                                                             respectively)
  188 00000096 4684            MOV              R12, R0
  189 00000098 468E            MOV              LR,  R1
  190 0000009A F383 8803       MSR              PSR, R3
  191 0000009E         
  192 0000009E B404            PUSH             {R2}        ;   Save PC
  193 000000A0         
  194 000000A0 B087            SUB              SP, #0x1C
  195 000000A2 BC0F            POP              {R0-R3}     ;   Pop new task's 
                                                            R0-R3
  196 000000A4 B003            ADD              SP, #0x0C
  197 000000A6 B662            CPSIE            I           ;   Enable interrup
                                                            ts
  198 000000A8 BD00            POP              {PC}
  199 000000AA BF00            NOP
  200 000000AC         
  201 000000AC         ;*******************************************************
                       *************************************************
  202 000000AC         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  203 000000AC         ;                                         void OSIntCtxS
                       w(void)
  204 000000AC         ;
  205 000000AC         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  206 000000AC         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  207 000000AC         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  208 000000AC         ;*******************************************************
                       *************************************************
  209 000000AC         
  210 000000AC         OSIntCtxSw
  211 000000AC B672            CPSID            I
  212 000000AE B084            SUB              SP,#0x10
  213 000000B0 B40F            PUSH             {R0-R3}
  214 000000B2         
  215 000000B2 B008            ADD              SP,#0x20
  216 000000B4 F3EF 8303       MRS              R3, PSR
  217 000000B8 4672            MOV              R2, LR
  218 000000BA 4671            MOV              R1, LR
  219 000000BC 4660            MOV              R0, R12
  220 000000BE B40F            PUSH             {R0-R3}
  221 000000C0         
  222 000000C0 B084            SUB              SP, #0x10
  223 000000C2 4640            MOV              R0, R8
  224 000000C4 4649            MOV              R1, R9
  225 000000C6 4652            MOV              R2, R10
  226 000000C8 465B            MOV              R3, R11
  227 000000CA B4FF            PUSH             {R0-R7}
  228 000000CC         



ARM Macro Assembler    Page 6 


  229 000000CC         
  230 000000CC F3EF 8008       MRS              R0, MSP
  231 000000D0 4916            LDR              R1, __OS_TCBCur ; OSTCBCur->OST
                                                            CBStkPtr = SP;
  232 000000D2 6809            LDR              R1, [R1]
  233 000000D4 6008            STR              R0, [R1]
  234 000000D6         
  235 000000D6 480F            LDR              R0, __OS_TaskSwHook 
                                                            ; OSTaskSwHook();
  236 000000D8 4780            BLX              R0
  237 000000DA         
  238 000000DA 4811            LDR              R0, __OS_PrioCur ; OSPrioCur = 
                                                            OSPrioHighRdy;
  239 000000DC 4911            LDR              R1, __OS_PrioHighRdy
  240 000000DE 780A            LDRB             R2, [R1]
  241 000000E0 7002            STRB             R2, [R0]
  242 000000E2         
  243 000000E2 4812            LDR              R0, __OS_TCBCur ; OSTCBCur  = O
                                                            STCBHighRdy;
  244 000000E4 4912            LDR              R1, __OS_TCBHighRdy
  245 000000E6 680A            LDR              R2, [R1]
  246 000000E8 6002            STR              R2, [R0]
  247 000000EA         
  248 000000EA 6810            LDR              R0, [R2]    ; SP = OSTCBHighRdy
                                                            ->OSTCBStkPtr;
  249 000000EC F380 8808       MSR              MSP, R0
  250 000000F0         
  251 000000F0         ; RESTORE TASK's CONTEXT
  252 000000F0 BCFF            POP              {R0-R7}     ;   Pop new task's 
                                                            R8-R11 (into R0-R3)
                                                            , R4-R7
  253 000000F2 4680            MOV              R8,  R0
  254 000000F4 4689            MOV              R9,  R1
  255 000000F6 4692            MOV              R10, R2
  256 000000F8 469B            MOV              R11, R3
  257 000000FA         
  258 000000FA B004            ADD              SP, #0x10
  259 000000FC BC0F            POP              {R0-R3}     ;   Pop new task's 
                                                            R12, PC, LR, PSR in
                                                            to (R0, R1, R2, R3,
                                                             respectively)
  260 000000FE 4684            MOV              R12, R0
  261 00000100 468E            MOV              LR,  R1
  262 00000102 F383 8803       MSR              PSR, R3
  263 00000106         
  264 00000106 B404            PUSH             {R2}        ;   Save PC
  265 00000108         
  266 00000108 B087            SUB              SP, #0x1C
  267 0000010A BC0F            POP              {R0-R3}     ;   Pop new task's 
                                                            R0-R3
  268 0000010C B003            ADD              SP, #0x0C
  269 0000010E B662            CPSIE            I           ;   Enable interrup
                                                            ts
  270 00000110 BD00            POP              {PC}
  271 00000112 BF00            NOP
  272 00000114         
  273 00000114         ;************************************
  274 00000114         ;全局变量定义
  275 00000114         ;************************************



ARM Macro Assembler    Page 7 


  276 00000114         __OS_TaskSwHook
  277 00000114 00000000        DCD              OSTaskSwHook
  278 00000118         
  279 00000118         __OS_IntExit
  280 00000118 00000000        DCD              OSIntExit
  281 0000011C         
  282 0000011C         __OS_IntNesting
  283 0000011C 00000000        DCD              OSIntNesting
  284 00000120         
  285 00000120         __OS_PrioCur
  286 00000120 00000000        DCD              OSPrioCur
  287 00000124         
  288 00000124         __OS_PrioHighRdy
  289 00000124 00000000        DCD              OSPrioHighRdy
  290 00000128         
  291 00000128         __OS_Running
  292 00000128 00000000        DCD              OSRunning
  293 0000012C         
  294 0000012C         __OS_TCBCur
  295 0000012C 00000000        DCD              OSTCBCur
  296 00000130         
  297 00000130         __OS_TCBHighRdy
  298 00000130 00000000        DCD              OSTCBHighRdy
  299 00000134         
  300 00000134                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=g070-ucosii\os_cpu_a.d -og070-ucosii\os_cpu_a.o -I.\RTE\_G070-UCO
SII -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\K
eil\STM32G0xx_DFP\1.2.0\Drivers\CMSIS\Device\ST\STM32G0xx\Include --predefine="
__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION S
ETA 524" --predefine="_RTE_ SETA 1" --predefine="STM32G070xx SETA 1" --list=os_
cpu_a.lst ..\uCOS-II\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 27 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000044

Symbol: OSCtxSw
   Definitions
      At line 138 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 23 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 000000AC

Symbol: OSIntCtxSw
   Definitions
      At line 210 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 24 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 91 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 22 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 70 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 21 in file ..\uCOS-II\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 64 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 20 in file ..\uCOS-II\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
__OS_IntExit 00000118

Symbol: __OS_IntExit
   Definitions
      At line 279 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      None
Comment: __OS_IntExit unused
__OS_IntNesting 0000011C

Symbol: __OS_IntNesting



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 282 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      None
Comment: __OS_IntNesting unused
__OS_PrioCur 00000120

Symbol: __OS_PrioCur
   Definitions
      At line 285 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 166 in file ..\uCOS-II\os_cpu_a.asm
      At line 238 in file ..\uCOS-II\os_cpu_a.asm

__OS_PrioHighRdy 00000124

Symbol: __OS_PrioHighRdy
   Definitions
      At line 288 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 167 in file ..\uCOS-II\os_cpu_a.asm
      At line 239 in file ..\uCOS-II\os_cpu_a.asm

__OS_Running 00000128

Symbol: __OS_Running
   Definitions
      At line 291 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 95 in file ..\uCOS-II\os_cpu_a.asm
Comment: __OS_Running used once
__OS_TCBCur 0000012C

Symbol: __OS_TCBCur
   Definitions
      At line 294 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 159 in file ..\uCOS-II\os_cpu_a.asm
      At line 171 in file ..\uCOS-II\os_cpu_a.asm
      At line 231 in file ..\uCOS-II\os_cpu_a.asm
      At line 243 in file ..\uCOS-II\os_cpu_a.asm

__OS_TCBHighRdy 00000130

Symbol: __OS_TCBHighRdy
   Definitions
      At line 297 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 100 in file ..\uCOS-II\os_cpu_a.asm
      At line 172 in file ..\uCOS-II\os_cpu_a.asm
      At line 244 in file ..\uCOS-II\os_cpu_a.asm

__OS_TaskSwHook 00000114

Symbol: __OS_TaskSwHook
   Definitions
      At line 276 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 92 in file ..\uCOS-II\os_cpu_a.asm



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 163 in file ..\uCOS-II\os_cpu_a.asm
      At line 235 in file ..\uCOS-II\os_cpu_a.asm

14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 16 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 280 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSIntExit used once
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 15 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 283 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSIntNesting used once
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 11 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 286 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 12 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 289 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 10 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 292 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 13 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 295 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSTCBCur used once
OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 14 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 298 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 17 in file ..\uCOS-II\os_cpu_a.asm
   Uses
      At line 277 in file ..\uCOS-II\os_cpu_a.asm
Comment: OSTaskSwHook used once
8 symbols
357 symbols in table
